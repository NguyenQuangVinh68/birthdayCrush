startStars1();
const giftBox = document.getElementById('giftBox');
giftBox.addEventListener('click', () => {
    giftBox.classList.add("open");

    setTimeout(() => {
        document.getElementById('page1').style.display = 'none';
        document.getElementById('page2').style.display = 'flex';
        startFireworks();
        startBubbles();
        startStars()
        startTyping();
    }, 900);
});

// ----------------- FIREWORKS -----------------
function startFireworks() {
    const canvas = document.getElementById('fireworks');
    const ctx = canvas.getContext('2d');
    function resize() { canvas.width = innerWidth; canvas.height = innerHeight; }
    resize(); addEventListener('resize', resize);

    const rockets = [];
    const particles = [];
    const rand = (min, max) => Math.random() * (max - min) + min;

    // Rocket (tia bay l√™n)
    function launchRocket() {
        rockets.push({
            x: rand(canvas.width * 0.2, canvas.width * 0.8),
            y: canvas.height,
            speed: rand(7, 10),
            targetY: rand(canvas.height * 0.2, canvas.height * 0.5),
            hue: Math.floor(rand(0, 360))
        });
    }

    // N·ªï ph√°o hoa
    function createExplosion(x, y, hue, size = "small") {
        const count = size === "small" ? 30 : 100; // √≠t h·∫°t cho n·ªï nh·ªè
        const speedMin = size === "small" ? 1 : 2;
        const speedMax = size === "small" ? 3 : 6;

        for (let i = 0; i < count; i++) {
            particles.push({
                x, y,
                angle: Math.random() * Math.PI * 2,
                speed: rand(speedMin, speedMax),
                radius: size === "small" ? 1.5 : 2.5,
                alpha: 1,
                decay: rand(0.012, 0.02),
                hue: hue + rand(-20, 20),
                isCore: size === "small" // ƒë√°nh d·∫•u h·∫°t n·ªï nh·ªè
            });
        }
    }

    function loop() {
        // n·ªÅn t·ªëi m·ªù
        ctx.fillStyle = 'rgba(0,0,0,0.2)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // rocket bay
        for (let i = rockets.length - 1; i >= 0; i--) {
            const r = rockets[i];
            r.y -= r.speed;

            // rocket s√°ng
            ctx.beginPath();
            ctx.arc(r.x, r.y, 2.5, 0, Math.PI * 2);
            ctx.fillStyle = `hsl(${r.hue}, 100%, 70%)`;
            ctx.fill();

            // ƒëu√¥i kh√≥i
            ctx.beginPath();
            ctx.arc(r.x, r.y + 15, 2, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(255,255,255,0.3)`;
            ctx.fill();

            if (r.y <= r.targetY) {
                // N·ªï nh·ªè tr∆∞·ªõc
                createExplosion(r.x, r.y, r.hue, "small");

                // Sau 1.5s n·ªï l·ªõn t·ª´ v·ªã tr√≠ ƒë√≥
                setTimeout(() => {
                    createExplosion(r.x, r.y, r.hue, "big");
                }, 1500);

                rockets.splice(i, 1);
            }
        }

        // update h·∫°t ph√°o hoa
        for (let i = particles.length - 1; i >= 0; i--) {
            const p = particles[i];
            p.x += Math.cos(p.angle) * p.speed;
            p.y += Math.sin(p.angle) * p.speed + 0.05; // tr·ªçng l·ª±c nh·∫π
            p.speed *= 0.98;
            p.alpha -= p.decay;

            ctx.beginPath();
            ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
            ctx.fillStyle = `hsla(${p.hue}, 100%, 50%, ${p.alpha})`;
            ctx.fill();

            if (p.alpha <= 0) particles.splice(i, 1);
        }

        requestAnimationFrame(loop);
    }

    setInterval(() => {
        launchRocket();
    }, 1200);

    loop();
}



// ----------------- BUBBLES -----------------
function startBubbles() {
    const canvas = document.getElementById('bubbles');
    const ctx = canvas.getContext('2d');
    function resize() { canvas.width = innerWidth; canvas.height = innerHeight; }
    resize(); addEventListener('resize', resize);

    const bubbles = [];
    const rand = (min, max) => Math.random() * (max - min) + min;
    const colors = ['#ff4f8b', '#3b83ff', '#a463ff'];

    function createBubble() {
        bubbles.push({
            x: rand(50, canvas.width - 50),
            y: canvas.height + 40,
            r: rand(18, 32),
            s: rand(0.6, 1.5),
            alpha: rand(0.7, 1),
            color: colors[Math.floor(Math.random() * colors.length)],
            offset: rand(0, Math.PI * 2) // t·∫°o ƒë·ªô l·ªách ƒë·ªÉ d√¢y m·ªói b√≥ng kh√°c nhau
        });
    }

    function loop() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        for (let i = bubbles.length - 1; i >= 0; i--) {
            const b = bubbles[i];
            b.y -= b.s;
            // v·∫Ω bong b√≥ng
            ctx.beginPath();
            ctx.arc(b.x, b.y, b.r, 0, Math.PI * 2);
            const grad = ctx.createRadialGradient(b.x - b.r / 3, b.y - b.r / 3, 2, b.x, b.y, b.r);
            grad.addColorStop(0, "#fff");
            grad.addColorStop(0.4, b.color);
            grad.addColorStop(1, "rgba(0,0,0,0.2)");
            ctx.fillStyle = grad;
            ctx.globalAlpha = b.alpha;
            ctx.fill();
            ctx.globalAlpha = 1;

            if (b.y + b.r < 0) bubbles.splice(i, 1);
        }

        requestAnimationFrame(loop);
    }

    setInterval(createBubble, 2000);
    loop();
}


// ----------------- STARS -----------------
function startStars() {
    const canvas = document.getElementById('stars');
    const ctx = canvas.getContext('2d');
    function resize() { canvas.width = innerWidth; canvas.height = innerHeight; }
    resize(); addEventListener('resize', resize);

    const stars = [];
    const rand = (min, max) => Math.random() * (max - min) + min;

    // t·∫°o nhi·ªÅu ng√¥i sao
    for (let i = 0; i < 120; i++) {
        stars.push({
            x: rand(0, canvas.width),
            y: rand(0, canvas.height * 0.7), // ch·ªâ t·ª´ gi·ªØa l√™n tr√™n
            r: rand(1, 2),                    // b√°n k√≠nh sao
            alpha: rand(0.3, 1),
            speed: rand(0.0008, 0.002),       // t·ªëc ƒë·ªô l·∫•p l√°nh
            offset: rand(0, Math.PI * 2)      // l·ªách pha ƒë·ªÉ kh√¥ng ƒë·ªìng b·ªô
        });
    }

    function loop(time) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        for (let i = 0; i < stars.length; i++) {
            const s = stars[i];
            // alpha dao ƒë·ªông theo sin ‚Üí l·∫•p l√°nh
            s.alpha = 0.5 + Math.sin(time * s.speed + s.offset) * 0.5;

            ctx.beginPath();
            ctx.arc(s.x, s.y, s.r, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(255,255,255,${s.alpha})`;
            ctx.fill();
        }

        requestAnimationFrame(loop);
    }

    loop(0);
}

function startStars1() {
    const canvas = document.getElementById('stars1');
    const ctx = canvas.getContext('2d');
    function resize() {
        canvas.width = innerWidth;
        canvas.height = innerHeight;
    }
    resize();
    addEventListener('resize', resize);

    const stars = [];
    const rand = (min, max) => Math.random() * (max - min) + min;

    // t·∫°o nhi·ªÅu ng√¥i sao
    for (let i = 0; i < 120; i++) {
        stars.push({
            x: rand(0, canvas.width),
            y: rand(0, canvas.height * 0.7), // ch·ªâ t·ª´ gi·ªØa l√™n tr√™n
            r: rand(2, 4),                   // üåü sao to h∆°n
            alpha: rand(0.3, 1),
            speed: rand(0.002, 0.006),       // ‚ö° l·∫•p l√°nh nhanh h∆°n
            offset: rand(0, Math.PI * 2)     // l·ªách pha ƒë·ªÉ kh√¥ng ƒë·ªìng b·ªô
        });
    }

    function loop(time) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        for (let i = 0; i < stars.length; i++) {
            const s = stars[i];
            // alpha dao ƒë·ªông theo sin ‚Üí l·∫•p l√°nh
            s.alpha = 0.5 + Math.sin(time * s.speed + s.offset) * 0.5;

            ctx.beginPath();
            ctx.arc(s.x, s.y, s.r, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(255,255,255,${s.alpha})`;
            ctx.fill();
        }

        requestAnimationFrame(loop);
    }

    loop(0);
}

const messageElement = document.querySelector('.message');
const text = 'Happy Birthday em üå∑! Ch√∫c em tu·ªïi m·ªõi lu√¥n xinh ƒë·∫πp, lu√¥n h·∫°nh ph√∫c n√®. Anh hy v·ªçng tu·ªïi m·ªõi n√†y s·∫Ω mang ƒë·∫øn cho em s·ª©c m·∫°nh v√† c∆° h·ªôi ƒë·ªÉ th·ª±c hi·ªán m·ªçi ∆∞·ªõc m∆° m√† em h·∫±ng ·∫•p ·ªß heüíñ';
let index = 0;
let isTyping = false;

function typeWriter() {
    if (index < text.length && isTyping) {
        messageElement.textContent += text.charAt(index);
        index++;
        setTimeout(typeWriter, 50); // Adjust speed (50ms per character)
    }
}

function startTyping() {
    if (!isTyping) {
        // Reset the text and index
        messageElement.textContent = '';
        index = 0;
        isTyping = true;
        typeWriter();
    }
}